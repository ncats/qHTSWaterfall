plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
help("setNames")
usethis::use_package("stats")
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runWaterfall()
help(useShinyjs)
library(qHTSWaterfall)
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
q\\
q
q
q
q
help(inlineCss)
help(inLineCSS)
help(shinyjs::inlineCSS)
help(inlineCSS)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
source("C:/Tools/git_projects/qhtsWaterfall/R/3d_qHTS_pubchem.R", echo=TRUE)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
help(add_trace)
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
responseAxisConfig = list(min=-450, max=500, tickSizeVal=100, firstTick=-500)
concAxisConfig = list(min=-9.2, max=-3.9, tickSizeVal=1.0, firstTick=-4)
planeColors = list(basePlaneColor="#b8b6b6", rightPlaneColor="#999494", leftPlaneColor="#6e6868")
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
returnPlotObject = F,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
responseAxisConfig = list(min=-115, max=50, tickSizeVal=25, firstTick=-100)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3", "darkgreen"),
curveColors = c("royalblue3", "darkgreen"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
runQHTSWaterfallApp()
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
a = 1
a
b = 1.00
b
typeof(a)
typeof(b)
a = (int) 1
class(a)
class(b)
c <- 1L
class(c)
help(floor)
floor(b)
floor(1.0000001)
ceiling(1.0000001)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
validExportFormats = c('jpeg', 'png', 'svg', 'webp')
a = 'png'
! a %in% validExportFormats
a %in% validExportFormats
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
Sys.info()
env()
environment()
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp()
help("observeEvent")
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(rsconnect)
library(devtools)
install_github("ncats/qhtsWaterfall")
qHTSWaterfall::runQHTSWaterfallApp()
deployApp()
qHTSWaterfall::runQHTSWaterfallApp()
rsconnect::deployApp('C:\Tools\R\R-4.1.0\library\qHTSWaterfall')
rsconnect::deployApp('C:/Tools/R/R-4.1.0/library/qHTSWaterfall')
rsconnect::deployApp('C:/Tools/git_projects/qHTSWaterfall_1.0.3.tar.gz')
rsconnect::deployApp('C:/Tools/git_projects/qhtsWaterfall')
rsconnect::deployApp('C:/Tools/git_projects/qhtsWaterfall/inst/shinyApp')
library(qHTSWaterfall)
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
library(qHTSWaterfall)
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
library(qHTSWaterfall)
qHTSWaterfall::runWaterfall()
setwd("C:/Users/braistedjc/Desktop/Analysis/ADST/waterfall_data/Trish_May_2023_problem_data")
csvFile = "Ce Podo + PDE Day7 rm empty lines.csv"
plotWaterfall(csvFile)
setwd("C:/Users/braistedjc/Desktop/Analysis/ADST/waterfall_data/Trish_May_2023_problem_data")
csvFile = "Ce Podo + PDE Day7 rm empty lines.csv"
plotWaterfall(csvFile)
plotWaterfall(csvFile, activityReadouts = c("Day 7 Area", "Day 7 # Worms"))
library(qHTSWaterfall)
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
qHTSWaterfall::runWaterfall()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
typeof(TRUE)
typeof(TRUE) = "logical"
typeof(TRUE) == "logical"
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
tolower(NA)
NA == 'log_conc_m'
if(NA)
)
if(tolowere(NA) == 'log')
{}
if(tolower(NA) == 'log')
{}
qHTSWaterfall::runQHTSWaterfallApp()
library(shinytest2)
install.packages('shinytest2')
shinytest2::use_shinytest2()
usethis::use_test("testSampleDataPlot")
devtools::load_all()
shinytest2::record_test(run())
library(qHTSWaterfall)
help(runWaterfall)
help(runQHTWaterfallApp)
help(runQHTSWaterfallApp)
shinytest2::record_test(runQHTSWaterfallApp())
shinytest2::record_test(runQHTSWaterfallApp())
library(qHTSWaterfall)
shinytest2::record_test(runQHTSWaterfallApp())
shinytest2::record_test("my_waterfall_test")
help("record_test")
shinytest2::record_test(app=".")
shinytest2::record_test(app="./R")
getwd()
shinytest2::record_test(app="./inst/shinyApp")
shinytest2::record_test(app="./inst/shinyApp")
library(qHTSWaterfall)
shinytest2::record_test(app="./inst/shinyApp")
shinytest2::record_test(app="./inst/shinyApp")
testthat::snapshot_review('shinytest2/')
install.packages('diffviewer')
library(diffviewer)
testthat::snapshot_review('shinytest2/')
testthat::snapshot_review('/inst/shinyapp/tests/testthat/shinytest2/')
testthat::snapshot_review('/inst/shinyapp/tests/testthat/shinytest2')
testthat::snapshot_review('/inst/shinyapp/tests/testthat/shinytest2.R')
getwd()
testthat::snapshot_review('inst/shinyapp/tests/testthat/shinytest2.R')
testthat::snapshot_review('./inst/shinyapp/tests/testthat/shinytest2.R')
setwd("./inst/shinyapp")
testthat::snapshot_review('shinytest2/')
testthat::snapshot_review('shinytest2/')
test_app('qHTSWaterfall', 'shinytest2/')
getwd()
test_app('qHTSWaterfall', 'shinytest2')
test_app('qHTSWaterfall', 'shinytest2')
test_app('qHTSWaterfall/inst/shinyApp/', 'shinytest2')
# installation, uncomment if not installed
# library(devtools)
# devtools::install_github("ncats/qHTSWaterfall")
# library load
library(qHTSWaterfall)
# data file
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# concentrations
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
responseAxisConfig = list(min=-220, max=50, tickSizeVal=50, firstTick=-100)
concAxisConfig = list(min=-9.2, max=-3.9, tickSizeVal=1.0, firstTick=-4)
planeColors = list(basePlaneColor="#c7c7c7", rightPlaneColor="#9e9e9e", leftPlaneColor="#6e6868")
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("#1D66E2", "#E2991D"),
curveColors = c("#1D66E2", "#E2991D"),
inactiveColor = "gray",
pointSize = 1.1,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1.5,5),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig,
axisFontSize = 14
)
p2 <- qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("#1D66E2", "#E2991D"),
curveColors = c("#1D66E2", "#E2991D"),
inactiveColor = "gray",
pointSize = 1.1,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1.5,5),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig,
axisFontSize = 14
)
plot_ly() %>%
config(
toImageButtonOptions = list(
format = "pdf",
filename = "myplot",
width = 600,
height = 700
)
)
p2 %>%
config(
toImageButtonOptions = list(
format = "webp",
filename = "myplot",
# width = 600,
# height = 700,
scale=7
)
)
library(qHTSWaterfall)
qHTSWaterfall::runWaterfall()
library(RaMP)
help("FilterFishersResults")
RaMP::findCluster()
help(findCluster)
qHTSWaterfall::runWaterfall()
