runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(knitr)
library(rgl)
rgl::setupKnitr(autoprint = T)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
fig.width = 8, fig.height = 8, fig.align = 'left',
comment = "#>"
)
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering (from the rgl package) that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
help("plotWaterfall")
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering (from the rgl package) that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
fileFormat = "ncats_qhts",
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(knitr)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
fig.width = 8, fig.height = 8, fig.align = 'left',
comment = "#>"
)
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering (from the rgl package) that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
fileFormat = "ncats_qhts",
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(knitr)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
fig.width = 8, fig.height = 8, fig.align = 'left',
comment = "#>"
)
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
fileFormat = "ncats_qhts",
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
help("setNames")
usethis::use_package("stats")
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runWaterfall()
help(useShinyjs)
library(qHTSWaterfall)
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
q\\
q
q
q
q
help(inlineCss)
help(inLineCSS)
help(shinyjs::inlineCSS)
help(inlineCSS)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
source("C:/Tools/git_projects/qhtsWaterfall/R/3d_qHTS_pubchem.R", echo=TRUE)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
help(add_trace)
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
responseAxisConfig = list(min=-450, max=500, tickSizeVal=100, firstTick=-500)
concAxisConfig = list(min=-9.2, max=-3.9, tickSizeVal=1.0, firstTick=-4)
planeColors = list(basePlaneColor="#b8b6b6", rightPlaneColor="#999494", leftPlaneColor="#6e6868")
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
returnPlotObject = F,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
responseAxisConfig = list(min=-115, max=50, tickSizeVal=25, firstTick=-100)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3", "darkgreen"),
curveColors = c("royalblue3", "darkgreen"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
runQHTSWaterfallApp()
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
a = 1
a
b = 1.00
b
typeof(a)
typeof(b)
a = (int) 1
class(a)
class(b)
c <- 1L
class(c)
help(floor)
floor(b)
floor(1.0000001)
ceiling(1.0000001)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
validExportFormats = c('jpeg', 'png', 'svg', 'webp')
a = 'png'
! a %in% validExportFormats
a %in% validExportFormats
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
Sys.info()
env()
environment()
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp()
help("observeEvent")
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
runApp()
